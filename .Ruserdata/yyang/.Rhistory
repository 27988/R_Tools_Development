filetype <- function(data,filetype="dataframe") {
if (tolower(filetype) == "dataframe") {data = data}  else if (tolower(filetype) == "rds") {
data = readRDS(data)}  else if (tolower(filetype) == "xls") {
data = read.xlsx(data, sheetName = 1, header = TRUE)}  else if (tolower(filetype) == "xlsx") {
data =  read.xlsx(data, sheetName = 1, header = TRUE)}  else if (tolower(filetype) == "csv") {
data = read.csv(data,header = TRUE, sep = ",")}  else stop("ERROR: File type is not compatible")
return(data)
}
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
############## function
multicoll_chk <- function(data,excludeVars=NULL,numVars=NULL,categoricalVars=NULL,cutoff=0,corrmethod="pearson",outtype="list",outpath) {
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numVars)
if (is.null(numVars)) {
numVars <- var_type[[1]]
}
#Identify character/categorical variables if is.null(categoricalVars)
if (is.null(categoricalVars)) {
categoricalVars <- var_type[[2]]
}
#Correlation for categorical variables
library(pedometrics)
if (is.null(categoricalVars)) {
message("No numeric variables in dataset")
}  else {    cramer_d <- data[,which(colnames(data) %in% categoricalVars)]}
if (length(cramer_d) > 0 ) {
cramer_vars <- matrix(0,((dim(cramer_d)[2]*(dim(cramer_d)[2]-1))/2),3)
cramer_v <- cramer(cramer_d)
c=0
for (j in 1:dim(cramer_v)[2]) {
if ((j+1) <= dim(cramer_v)[2]) {for (k in (j+1):dim(cramer_v)[2]) {
c=c+1
cramer_vars[c,1] <- rownames(cramer_v)[j]
cramer_vars[c,2] <- colnames(cramer_v)[k]
cramer_vars[c,3] <- cramer_v[j,k]
}
}
}
cramer_vars <- data.frame(cramer_vars)
colnames(cramer_vars) <- c("Variable1", "Variable2", "Coeff")
cramer_vars$Coeff <- as.numeric(as.character(cramer_vars$Coeff))
#Track the variables that are highly correlated
corr_categorical <- cramer_vars[cramer_vars[["Coeff"]] >= cutoff,]
}
#Correlation for numeric variables
if (is.null(numVars)) {
message("No numeric variables in dataset")
} else {corr_d <- data[,which(colnames(data) %in% numVars)]}
if (length(corr_d) > 0 ) {
corr_vars <- matrix(0,((dim(corr_d)[2]*(dim(corr_d)[2]-1))/2),3)
corr_v <- cor(corr_d, use="complete.obs", method=corrmethod)
c=0
for (j in 1:dim(corr_v)[2]) {
if ((j+1) <= dim(corr_v)[2]) {for (k in (j+1):dim(corr_v)[2]) {
c=c+1
corr_vars[c,1] <- rownames(corr_v)[j]
corr_vars[c,2] <- colnames(corr_v)[k]
corr_vars[c,3] <- corr_v[j,k]
}
}
}
corr_vars <- data.frame(corr_vars)
colnames(corr_vars) <- c("Variable1", "Variable2", "Coeff")
corr_vars$Coeff <- as.numeric(as.character(corr_vars$Coeff))
#Track the variables that are highly correlated
corr_num <- corr_vars[corr_vars[["Coeff"]] >= cutoff,]
}
if (outtype == "list"){
corr_list <- list()
corr_list$numeric_list <- corr_num
corr_list$categorical_list <- corr_categorical
return(corr_list)
} else if (tolower(outtype) == "xls" | tolower(outtype) == "xlsx") {
write.xlsx(corr_num, file=outpath, sheetName="Numeric List", row.names=FALSE)
write.xlsx(corr_categorical, file=outpath, sheetName="Categorical List", append=TRUE, row.names=FALSE)
} else stop("ERROR: Type of output file should either be list, xls or xlsx")
}
t_data<- readRDS("/stats/projects/all/R_Tools_Development/data/model_dt.Rds")
sample_n(t_data, 500) ->t_data
library(tidyverse)
sample_n(t_data, 500) ->t_data
t_data<- readRDS("/stats/projects/all/R_Tools_Development/data/model_dt.Rds")
sample_n(t_data, 500)
t_data<- t_data[c(1,500), ]
View(t_data)
t_data<- readRDS("/stats/projects/all/R_Tools_Development/data/model_dt.Rds")
View(t_data)
t_data %>%
filter(covid_week_ind == 1) ->t_data
View(t_data)
multicoll_chk(data=t_data)
str(t_data)
t_data<- readRDS("/stats/projects/all/R_Tools_Development/data/model_dt.Rds")
t_data %>%
filter(covid_week_ind == 1) %>%
select(-month_id, -choice_week_id, -start_of_week, -end_of_week, -`count(*)`, -subscriber_id, -line_of_business, -region_name, -borough,
-ics_ind, -ltp_ind, -dl_assess_sk, -hha_provider_name, -trans_daycare_provider_name, -any_cdpas_ind, -dual_ind, -dual_ind2, -covid_start_date,
-covid_start_month, -covid_week_ind, -covid_week_ref, -covid_reason_description, -assessmentdate, -drop_week_ind) ->t_data
multicoll_chk(data=t_data)
View(t_data)
multicoll_chk(mockstudy)
library(arsenal)
multicoll_chk(mockstudy)
multicoll_chk(t_data)
str(t_data)
str(mockstudy)
data=t_data
excludeVars=NULL
numVars=NULL
categoricalVars=NULL
cutoff=0
corrmethod="pearson"
outtype="list"
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numVars)
if (is.null(numVars)) {
numVars <- var_type[[1]]
}
numVars
if (is.null(categoricalVars)) {
categoricalVars <- var_type[[2]]
}
categoricalVars
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
numVars
View(data)
dim(data)[2]
i=1
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
yesnum
str(data$member_id)
is.numeric(data$member_id)
class(data)
data[,1]
data = data.frame(data)
str(data)
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
yesnum
data = data.table(data)
data = as.data.table(data)
class(t_data)
library(data.table)
t_data <- setDT(t_data)
class(t_data)
multicoll_chk(t_data)
t_data <- as.data.frame(t_data)
class(t_data)
multicoll_chk(t_data)
t_data <- as.tibble(t_data)
t_data <- as_tibble(t_data)
class(t_data)
multicoll_chk(t_data)
rm(data)
d_summary <- function(formula, df, filetype_in = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  filetype_out = "rmd", output_path = NULL, ...) {
if (tolower(filetype_in) == "dataframe") {df = df}  else if (tolower(filetype_in) == "rds") {
df = readRDS(df)}  else if (tolower(filetype_in) == "csv") {
df = read.csv(df, header = TRUE, sep = ",")}  else if (tolower(filetype_in) == "xls") {
df = read.xls(df, sheetName = 1, header = TRUE)}  else if (tolower(filetype_in) == "xlsx") {
df = read.xlsx(df, sheetName = 1, header = TRUE)}  else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
df[[i]] <- as.numeric(as.character(df[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
df[[i]] <- as.factor(as.character(df[[i]]))
}
}
var_type_identify <- function (df,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(df)[2]) {
yesnum <-  is.numeric(df[,i]) | is.integer(df[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(df)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(df)[2]) {
yescat <-  is.character(df[,i]) | is.factor(df[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(df)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(df)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
df[[i]] <- as.factor(as.character(df[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(df[,sapply(df, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {df_a <- df[, -which(names(df) %in% l3)] # remove factor column which level exceed the setting range
}  else if (purrr::is_empty(l3)) {df_a <- df}  else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, df_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(filetype_out) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable()     %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
save_kable(file = "table1.html", self_contained = T)
# result<-tab2
}
else if (tolower(filetype_out) == "rds" & !is.null(output_path)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,output_path)
}
else if (tolower(filetype_out) == "html" & !is.null(output_path) ){
write2html(tab1, output_path)
}
else if (tolower(filetype_out) == "pdf" & !is.null(output_path) ){
write2pdf(tab1, output_path)
}
else stop ("ERROR: Please check if filetype_out or output_path is missing/valid")
if (! purrr::is_empty(l3) & filetype_out == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return((list(l3, browseURL("table1.html") )))
}
else if (! purrr::is_empty(l3) & filetype_out != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & filetype_out == "rmd") {
return(browseURL("table1.html") )
}
}
d_summary(sex ~ race + age, mockstudy)
d_summary <- function(formula, df, filetype_in = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  filetype_out = "rmd", output_path = NULL, ...) {
if (tolower(filetype_in) == "dataframe") {df = df}  else if (tolower(filetype_in) == "rds") {
df = readRDS(df)}  else if (tolower(filetype_in) == "csv") {
df = read.csv(df, header = TRUE, sep = ",")}  else if (tolower(filetype_in) == "xls") {
df = read.xls(df, sheetName = 1, header = TRUE)}  else if (tolower(filetype_in) == "xlsx") {
df = read.xlsx(df, sheetName = 1, header = TRUE)}  else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
library(kableExtra)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
df[[i]] <- as.numeric(as.character(df[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
df[[i]] <- as.factor(as.character(df[[i]]))
}
}
var_type_identify <- function (df,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(df)[2]) {
yesnum <-  is.numeric(df[,i]) | is.integer(df[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(df)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(df)[2]) {
yescat <-  is.character(df[,i]) | is.factor(df[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(df)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(df)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
df[[i]] <- as.factor(as.character(df[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(df[,sapply(df, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {df_a <- df[, -which(names(df) %in% l3)] # remove factor column which level exceed the setting range
}  else if (purrr::is_empty(l3)) {df_a <- df}  else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, df_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(filetype_out) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable()     %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
save_kable(file = "table1.html", self_contained = T)
# result<-tab2
}
else if (tolower(filetype_out) == "rds" & !is.null(output_path)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,output_path)
}
else if (tolower(filetype_out) == "html" & !is.null(output_path) ){
write2html(tab1, output_path)
}
else if (tolower(filetype_out) == "pdf" & !is.null(output_path) ){
write2pdf(tab1, output_path)
}
else stop ("ERROR: Please check if filetype_out or output_path is missing/valid")
if (! purrr::is_empty(l3) & filetype_out == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return((list(l3, browseURL("table1.html") )))
}
else if (! purrr::is_empty(l3) & filetype_out != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & filetype_out == "rmd") {
return(browseURL("table1.html") )
}
}
d_summary(sex ~ race + age, mockstudy)
d_summary(sex ~ race + age, mockstudy)
rmarkdown::pandoc_version()
