tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,savepath)
}  else if (tolower(savetype) == "html" & !is.null(savepath) ){
write2html(tab1, savepath)
}  else if (tolower(savetype) == "pdf" & !is.null(savepath) ){
write2pdf(tab1, savepath)
}  else stop ("ERROR: Please check if savetype or savepath is missing/valid")
if (! purrr::is_empty(l3) & savetype == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(invisible(list(print(l3), result)))
}  else if (! purrr::is_empty(l3) & savetype != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}  else if (purrr::is_empty(l3) & savetype == "rmd") {
return(invisible( result))
}
}
d_summary(rank ~ ., data,)
d_summary(rank ~ ., data,level_droprange=2,savetype = "rds", savepath = "/stats/projects/all/R_Tools_Development/data/r_test.rds")
d_summary(rank ~ ., data,level_droprange=2,savetype = "pdf", savepath = "/stats/projects/all/R_Tools_Development/data/r_test.pdf")
d_summary(rank ~ ., data,level_droprange=2,savetype = "pdf", savepath = "/stats/projects/all/R_Tools_Development/data/r_test1.pdf")
d_summary(rank ~ ., data,)
d_summary(rank ~ ., data,)
#' Summary of Descriptive Statistics
#'
#' @param formula An object of class formula, describing how variables to be summarized.
#' @param data Input data for summary statistics, default is data frame. If data is not in data frame, please put your data path here
#' @param filetype Input file type, currently can accept data frame, rds, csv, xls, xlsx, default is data frame.
#' @param savetype Output type, currently can be rmd, rds, html and pdf, default is rmd.
#' @param savepath If output type is rds, html or pdf, please put your save path here.
#' @param to_numeric An optional input to change variable class to numeric
#' @param to_factor An optional input to change variable class to factor
#' @param level_droprange set the maximum level of a character variable that will be included in the summary table,
#' if a character variable's level exceeds this range, it will be automatically drop from the summary table, default value is 20.
#' @return Descriptive Summary Tables
#' @examples
#'
#' d_summary(sex ~ race + age, mockstudy)
#' d_summary(sex ~ race + age, mockstudy, cat.stats = "countrowpct")  # if you need to calculate row percentage
#' d_summary(sex ~., mockstudy, level_droprange = 5) # set level drop range rather than default
#' d_summary(sex ~ race + age, mockstudy, savetype = "rds", savepath = "/home/yyang/r_pack/r_test.Rds")
#' d_summary(sex ~ age + bmi + race, mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf")
#' d_summary(sex ~., mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf", level_droprange = 5)
# require pacakage: tidyverse, arsenal
d_summary <- function(formula, data, filetype = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  savetype = "rmd", savepath = NULL, ...) {
if (tolower(filetype) == "dataframe") {data = data}
else if (tolower(filetype) == "rds") {data = readRDS(data)}
else if (tolower(filetype) == "csv") {data = read.csv(data, header = TRUE, sep = ",")}
else if (tolower(filetype) == "xls") {data = read.xls(data, sheetName = 1, header = TRUE)}
else if (tolower(filetype) == "xlsx") {data = read.xlsx(data, sheetName = 1, header = TRUE)}
else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
data[[i]] <- as.numeric(as.character(data[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(data)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(data[,sapply(data, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {data_a <- data[, -which(names(data) %in% l3)] }  # remove factor column which level exceed the setting range
else if (purrr::is_empty(l3)) {data_a <- data}
else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, data_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(savetype) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) -> tab2
result<-tab2
}
else if (tolower(savetype) == "rds" & !is.null(savepath)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,savepath)
}
else if (tolower(savetype) == "html" & !is.null(savepath) ){
write2html(tab1, savepath)
}
else if (tolower(savetype) == "pdf" & !is.null(savepath) ){
write2pdf(tab1, savepath)
}
else stop ("ERROR: Please check if savetype or savepath is missing/valid")
if (! purrr::is_empty(l3) & savetype == "rmd") {
message ("Warning: You will have some variables below dropped from summary since they exceed maximum level_droprange")
return(list (l3, result))
}
else if (! purrr::is_empty(l3) & savetype != "rmd") {
message ("Warning: You will have some variables below dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & savetype == "rmd") {
return(result)
}
}
d_dumm_test <- readRDS("/stats/projects/all/R_Tools_Development/data/d_dumm_test.rds")
View(d_dumm_test)
salaries_data <- readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data = salaries_data
d_summary(rank ~ ., data)
library(data.table)
d_summary(rank ~ ., data)
library(kableExtra)
d_summary(rank ~ ., data)
d_summary(rank ~ ., data,savetype = "pdf", savepath = "./data.r_test.pdf")
d_summary(rank ~ ., data,savetype = "rds", savepath = "./data/r_test.rds")
r_test <- readRDS("/stats/projects/all/R_Tools_Development/data/r_test.rds")
View(r_test)
d_summary(rank ~ ., data,savetype = "html", savepath = "./data/r_test.html")
d_summary(rank ~ ., data,savetype = "html", savepath = "./data/r_test.html")
d_summary(rank ~ ., data,savetype = "html", savepath = "stats/projects/all/R_Tools_Development/data/r_test.html")
d_summary(rank ~ ., data,savetype = "html", savepath = "/stats/projects/all/R_Tools_Development/data/r_test.html")
d_summary(rank ~ ., data)
# R tool Development
# descriptive statistics
#############################################################################################################
#' Summary of Descriptive Statistics
#'
#' @param formula An object of class formula, describing how variables to be summarized.
#' @param data Input data for summary statistics, default is data frame. If data is not in data frame, please put your data path here
#' @param filetype Input file type, currently can accept data frame, rds, csv, xls, xlsx, default is data frame.
#' @param savetype Output type, currently can be rmd, rds, html and pdf, default is rmd.
#' @param savepath If output type is rds, html or pdf, please put your save path here.
#' @param to_numeric An optional input to change variable class to numeric
#' @param to_factor An optional input to change variable class to factor
#' @param level_droprange set the maximum level of a character variable that will be included in the summary table,
#' if a character variable's level exceeds this range, it will be automatically drop from the summary table, default value is 20.
#' @return Descriptive Summary Tables
#' @examples
#'
#' d_summary(sex ~ race + age, mockstudy)
#' d_summary(sex ~ race + age, mockstudy, cat.stats = "countrowpct")  # if you need to calculate row percentage
#' d_summary(sex ~., mockstudy, level_droprange = 5) # set level drop range rather than default
#' d_summary(sex ~ race + age, mockstudy, savetype = "rds", savepath = "/home/yyang/r_pack/r_test.Rds")
#' d_summary(sex ~ age + bmi + race, mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf")
#' d_summary(sex ~., mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf", level_droprange = 5)
d_summary <- function(formula, data, filetype = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  savetype = "rmd", savepath = NULL, ...) {
if (tolower(filetype) == "dataframe") {data = data}  else if (tolower(filetype) == "rds") {
data = readRDS(data)}  else if (tolower(filetype) == "csv") {
data = read.csv(data, header = TRUE, sep = ",")}  else if (tolower(filetype) == "xls") {
data = read.xls(data, sheetName = 1, header = TRUE)}  else if (tolower(filetype) == "xlsx") {
data = read.xlsx(data, sheetName = 1, header = TRUE)}  else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
data[[i]] <- as.numeric(as.character(data[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(data)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(data[,sapply(data, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {data_a <- data[, -which(names(data) %in% l3)] # remove factor column which level exceed the setting range
}  else if (purrr::is_empty(l3)) {data_a <- data}  else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, data_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(savetype) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) -> tab2
result<-tab2
}
else if (tolower(savetype) == "rds" & !is.null(savepath)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,savepath)
}
else if (tolower(savetype) == "html" & !is.null(savepath) ){
write2html(tab1, savepath)
}
else if (tolower(savetype) == "pdf" & !is.null(savepath) ){
write2pdf(tab1, savepath)
}
else stop ("ERROR: Please check if savetype or savepath is missing/valid")
if (! purrr::is_empty(l3) & savetype == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(invisible(list(print(l3), result)))
}
else if (! purrr::is_empty(l3) & savetype != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & savetype == "rmd") {
return(invisible( result))
}
}
#Test
library(data.table)
library(kableExtra)
d_summary(rank ~ ., data)
d_summary(rank ~ ., data)
d_summary(rank ~ ., data)
d_summary(rank ~ ., data,savetype = "html", savepath = "/stats/projects/all/R_Tools_Development/data/r_test.html")
d_summary(rank ~ ., data)
d_summary(rank ~ ., data,savetype = "rds", savepath = "/stats/projects/all/R_Tools_Development/data/r_test.rds")
# R tool Development
# descriptive statistics
#############################################################################################################
#' Summary of Descriptive Statistics
#'
#' @param formula An object of class formula, describing how variables to be summarized.
#' @param data Input data for summary statistics, default is data frame. If data is not in data frame, please put your data path here
#' @param filetype Input file type, currently can accept data frame, rds, csv, xls, xlsx, default is data frame.
#' @param savetype Output type, currently can be rmd, rds, html and pdf, default is rmd.
#' @param savepath If output type is rds, html or pdf, please put your save path here.
#' @param to_numeric An optional input to change variable class to numeric
#' @param to_factor An optional input to change variable class to factor
#' @param level_droprange set the maximum level of a character variable that will be included in the summary table,
#' if a character variable's level exceeds this range, it will be automatically drop from the summary table, default value is 20.
#' @return Descriptive Summary Tables
#' @examples
#'
#' d_summary(sex ~ race + age, mockstudy)
#' d_summary(sex ~ race + age, mockstudy, cat.stats = "countrowpct")  # if you need to calculate row percentage
#' d_summary(sex ~., mockstudy, level_droprange = 5) # set level drop range rather than default
#' d_summary(sex ~ race + age, mockstudy, savetype = "rds", savepath = "/home/yyang/r_pack/r_test.Rds")
#' d_summary(sex ~ age + bmi + race, mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf")
#' d_summary(sex ~., mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf", level_droprange = 5)
d_summary <- function(formula, data, filetype = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  savetype = "rmd", savepath = NULL, ...) {
if (tolower(filetype) == "dataframe") {data = data}  else if (tolower(filetype) == "rds") {
data = readRDS(data)}  else if (tolower(filetype) == "csv") {
data = read.csv(data, header = TRUE, sep = ",")}  else if (tolower(filetype) == "xls") {
data = read.xls(data, sheetName = 1, header = TRUE)}  else if (tolower(filetype) == "xlsx") {
data = read.xlsx(data, sheetName = 1, header = TRUE)}  else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
data[[i]] <- as.numeric(as.character(data[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(data)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(data[,sapply(data, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {data_a <- data[, -which(names(data) %in% l3)] # remove factor column which level exceed the setting range
}  else if (purrr::is_empty(l3)) {data_a <- data}  else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, data_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(savetype) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) -> tab2
result<-tab2
}
else if (tolower(savetype) == "rds" & !is.null(savepath)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,savepath)
}
else if (tolower(savetype) == "html" & !is.null(savepath) ){
write2html(tab1, savepath)
}
else if (tolower(savetype) == "pdf" & !is.null(savepath) ){
write2pdf(tab1, savepath)
}
else stop ("ERROR: Please check if savetype or savepath is missing/valid")
if (! purrr::is_empty(l3) & savetype == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(invisible(list(print(l3), result)))
}
else if (! purrr::is_empty(l3) & savetype != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & savetype == "rmd") {
return(( result))
}
}
#Test
library(data.table)
library(kableExtra)
data = read.xlsx( "./data/a.xls", sheetName  = "Sheet1")
d_summary(rank ~ ., data)
# R tool Development
# descriptive statistics
#############################################################################################################
#' Summary of Descriptive Statistics
#'
#' @param formula An object of class formula, describing how variables to be summarized.
#' @param data Input data for summary statistics, default is data frame. If data is not in data frame, please put your data path here
#' @param filetype Input file type, currently can accept data frame, rds, csv, xls, xlsx, default is data frame.
#' @param savetype Output type, currently can be rmd, rds, html and pdf, default is rmd.
#' @param savepath If output type is rds, html or pdf, please put your save path here.
#' @param to_numeric An optional input to change variable class to numeric
#' @param to_factor An optional input to change variable class to factor
#' @param level_droprange set the maximum level of a character variable that will be included in the summary table,
#' if a character variable's level exceeds this range, it will be automatically drop from the summary table, default value is 20.
#' @return Descriptive Summary Tables
#' @examples
#'
#' d_summary(sex ~ race + age, mockstudy)
#' d_summary(sex ~ race + age, mockstudy, cat.stats = "countrowpct")  # if you need to calculate row percentage
#' d_summary(sex ~., mockstudy, level_droprange = 5) # set level drop range rather than default
#' d_summary(sex ~ race + age, mockstudy, savetype = "rds", savepath = "/home/yyang/r_pack/r_test.Rds")
#' d_summary(sex ~ age + bmi + race, mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf")
#' d_summary(sex ~., mockstudy, savetype = "pdf", savepath = "/home/yyang/r_pack/r_test.pdf", level_droprange = 5)
d_summary <- function(formula, data, filetype = "dataframe", to_numeric = NULL, to_factor = NULL, level_droprange = 20,  savetype = "rmd", savepath = NULL, ...) {
if (tolower(filetype) == "dataframe") {data = data}  else if (tolower(filetype) == "rds") {
data = readRDS(data)}  else if (tolower(filetype) == "csv") {
data = read.csv(data, header = TRUE, sep = ",")}  else if (tolower(filetype) == "xls") {
data = read.xls(data, sheetName = 1, header = TRUE)}  else if (tolower(filetype) == "xlsx") {
data = read.xlsx(data, sheetName = 1, header = TRUE)}  else stop ("ERROR: Please select a valid file type")
library(arsenal)
library(tidyverse)
if (!is.null(to_numeric)) {
for(i in to_numeric ){
data[[i]] <- as.numeric(as.character(data[[i]]))
}
}
if (!is.null(to_factor)) {
for(i in to_factor){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
var_type_cf <- var_type_identify(data)[[2]]    # get character/factor variablie lists
if (!is.null(var_type_cf)) {
for(i in var_type_cf){
data[[i]] <- as.factor(as.character(data[[i]]))
}
}
if (! is.null(level_droprange)) {
l1 <- setDT(as.data.frame(sapply(data[,sapply(data, is.factor)], nlevels)), keep.rownames = TRUE)
names(l1)[2] <- "nlevels"
l2 <- subset(l1, l1$nlevels>level_droprange)
l3<-l2$rn   # drop list names
}
if (!purrr::is_empty(l3)) {data_a <- data[, -which(names(data) %in% l3)] # remove factor column which level exceed the setting range
}  else if (purrr::is_empty(l3)) {data_a <- data}  else stop ("ERROR: Please check level droprange")
f1 <- as.formula(formula)
tab1<-tableby(f1, data_a, ...)
tab1s<- summary(tab1, text = TRUE, ...)
if (tolower(savetype) == "rmd") {
tab1s %>%
as.data.frame() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover")) -> tab2
result<-tab2
}
else if (tolower(savetype) == "rds" & !is.null(savepath)){
tab2<-as.data.frame(tab1s)
tab2<-dplyr::rename(tab2, variables = "")
saveRDS(tab2,savepath)
}
else if (tolower(savetype) == "html" & !is.null(savepath) ){
write2html(tab1, savepath)
}
else if (tolower(savetype) == "pdf" & !is.null(savepath) ){
write2pdf(tab1, savepath)
}
else stop ("ERROR: Please check if savetype or savepath is missing/valid")
if (! purrr::is_empty(l3) & savetype == "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(invisible(list(print(l3), result)))
}
else if (! purrr::is_empty(l3) & savetype != "rmd") {
message ("Warning: Variables shown below are dropped from summary since they exceed maximum level_droprange")
return(l3)
}
else if (purrr::is_empty(l3) & savetype == "rmd") {
return(invisible( result))
}
}
#Test
library(data.table)
library(kableExtra)
d_summary(rank ~ ., data)
