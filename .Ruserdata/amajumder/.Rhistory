body <- paste('#', name_vec, '\n\n:::: {style="display: flex;"} \n\n::: {} \n\n',
'\n \n```{r, echo = FALSE}\n#left column\n','knitr::kable(',
table_vec,',row.names = FALSE)',
'\n```\n\n:::\n\n::: {}\n\n```{r,  echo = FALSE}\n#right column\n',
'htmlwidgets::saveWidget(\n',plot_vec,', "myPivot.html", selfcontained = T)\n',
'webshot2::webshot(url = "myPivot.html", file = "myPivot.png")',
'\n```\n\n::: \n\n::::\n\n')
write(c(top_block_yaml, body), file = paste0(output_path, "univariate_report",".Rmd"))
# render(paste0(output_path, "univariate_report",".Rmd"))
browseURL(render(paste0(output_path, "univariate_report",".Rmd")))
#Remove temp files
file.remove(paste0(output_path,"myPivot.png"))
file.remove(paste0(output_path,"myPivot.html"))
file.remove(paste0(output_path,univariate_list_name))
file.remove(paste0(output_path,"univariate_report.tex"))
}    else if (tolower(output_type) %in% c("rmd","html")) {
univariate_list_name <- paste0('univariate-list-object_',Sys.Date(), '.RDS')
saveRDS(univariate_list_object, file = paste0(output_path, univariate_list_name))
top_block_yaml <- c('---',
'title: "Univariate Analysis Report"',
# paste0('subtitle: "Data Source: ', df_name, '"', collapse = ""),
paste0('author: "', Sys.info()[["user"]],'"'),
paste0('date: "', format(Sys.Date(), '%m/%d/%Y'), '"'),
'output: html_document',
'---',
'',
'```{r setup, include=FALSE}',
'knitr::opts_chunk$set(echo = TRUE,warning=FALSE, message=FALSE)',
'',
'library("tidyverse")',
'library("grid")',
'library("gridExtra")',
'library("ggpubr")',
'library("knitr")',
'library("plotly")',
'',
if (flag_path == "no") {paste0('univariate_list_object <- readRDS(file = ".', output_path,
univariate_list_name, '")')} else
{paste0('univariate_list_object <- readRDS(file = "', output_path,
univariate_list_name, '")')},
'```\n')
name_vec <- univariate_list_object$predictor_names
table_vec <- paste('univariate_list_object$df$', name_vec, sep = '')
plot_vec <- paste('univariate_list_object$plots$', name_vec, sep = '')
body <- paste('#', name_vec, '\n\n:::: {style="display: flex;"} \n\n::: {} \n\n',
'\n \n```{r, echo = FALSE}\n#left column\n','knitr::kable(',
table_vec,',row.names = FALSE)',
'\n```\n\n:::\n\n::: {}\n\n```{r,  echo = FALSE}\n#right column\n', plot_vec,
'\n```\n\n::: \n\n::::\n\n')
write(c(top_block_yaml, body), file = paste0(output_path, "univariate_report",".Rmd"))
# render(paste0(output_path, "univariate_report",".Rmd"))
browseURL(render(paste0(output_path, "univariate_report",".Rmd")))
#Remove temp files
file.remove(paste0(output_path,univariate_list_name))
}  else if (tolower(output_type) %in% c("rds")) {
saveRDS(univariate_list_object, file = paste0(output_path,"univariate_report.Rds"))}    else {
stop("Please specify valid output format! (One of list, rmd, rds, html or pdf)")
}
}
output <- univariate_fun("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds",
exclude_vars = "patient_id", outcome = "salary",
output_type = "pdf", output_path = "./data/")
output <- univariate_fun("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds",
exclude_vars = "patient_id", outcome = "salary")
#' Imputation of missing values.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded form imputation.
#' @param numvarlist A vector of numeric variables to be imputed.
#' @param type_num Type of imputation for numeric variables to be used. Mean is Default method. Choices are min, max, mean, median and mode.
#' @param round Upto which decimal should imputed numeric values be rounded. Default rounds to whole number.
#' @param factvarlist A vector of factor variables to be imputed.
#' @param type_fact Type of imputation for factor variables to be used. Adding 'missing' level is Default method. Choices are mode and missing.
#' @return Input dataset with imputed values.
#' @examples
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mean",round=0,factvarlist=c("rank"),type_fact = "mode")
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "median",round=2,factvarlist=c("rank"),type_fact="missing")
#'
impute <- function(data, excludeVars=NULL,numvarlist=NULL,type_num = "mean",round=0,factvarlist=NULL,type_fact = "missing") {
library(DescTools)
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numvarlist)
if (is.null(numvarlist)) {
numvarlist <- var_type[[1]]
}
if (!is.null(numvarlist)) {
for(i in numvarlist ){
data[[i]] <- as.numeric(data[[i]])
summ <- list()
if (tolower(type_num) == "mean") {
summ[[i]] <- round(mean(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "median") {
summ[[i]] <- round(median(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "mode") {
summ[[i]] <- Mode(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "max") {
summ[[i]] <- max(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "min") {
summ[[i]] <- min(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else stop("ERROR: Only min, max, mean, median and mode allowed for type of numeric variables imputation")
}
}
#Identify character/categorical variables if is.null(factvarlist)
if (is.null(factvarlist)) {
factvarlist <- var_type[[2]]
}
if (!is.null(factvarlist)) {
for(i in factvarlist ){
summ <- list()
if (tolower(type_fact) == "mode") {
summ[[i]] <- Mode(levels(data[[i]])[data[[i]]],na.rm=TRUE)
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),summ[[i]],levels(data[[i]])[data[[i]]]))
}
else if (tolower(type_fact) == "missing") {
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),"Missing",levels(data[[i]])[data[[i]]]))
}
else stop("ERROR: Only 'mode' and 'missing' allowed for type of factor variables imputation")
}
}
return(data)
}
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service","text_fct"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
#' Identify numeric/integer and categorical/character variables.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded.
#' @return List of numeric and categorical variables.
#' @examples
#' var_type <- var_type_identify(data=data,excludeVars=NULL)
#'
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
#Test
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
var_type <- var_type_identify(data=data,excludeVars=NULL)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service","text_fct"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
View(data)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
View(data)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service","text_fct"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
View(var_type)
View(data_imputed)
table(data$text_fct)
#' Check for Multicollinearity among candidate predictors.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded form multicollinearity check.
#' @param numVars A vector of numeric variables (optional).
#' @param categoricalVars A vector of character (categorical) variables (optional).
#' @param cutoff Cutoff of correlation coefficient or Cramer's V coefficient to be used to output correlated variables.
#' @param corrmethod Correlation coefficient method to be used, Default is 'pearson'. Options are 'kendall', 'spearman'.
#' @param outtype Type of output file.
#' @param outpath Path of output file if xls or xlsx outtype selected.
#' @return A list of 2 dataframes; correlation analysis of numeric variables are stored as list1 and categorical analysis is stored as list2.
#' @examples
#' multi_out <- multicoll_chk(data=data,numVars=c("yrs.service","yrs.since.phd"),categoricalVars = c("rank","discipline"))
#' multi_out <- multicoll_chk(data=data)
#' multi_out <- multicoll_chk(data=data,excludeVars="patient_id")
#' multi_out <- multicoll_chk(data=data,excludeVars=NULL,outtype="xls",outpath="/stats/projects/all/R_Tools_Development/data/multicoll_chk.xls")
multicoll_chk <- function(data,excludeVars=NULL,numVars=NULL,categoricalVars=NULL,cutoff=0,corrmethod="pearson",outtype="list",outpath) {
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numVars)
if (is.null(numVars)) {
numVars <- var_type[[1]]
}
#Identify character/categorical variables if is.null(categoricalVars)
if (is.null(categoricalVars)) {
categoricalVars <- var_type[[2]]
}
#Correlation for categorical variables
library(pedometrics)
if (is.null(categoricalVars)) {
message("No numeric variables in dataset")
}  else {    cramer_d <- data[,which(colnames(data) %in% categoricalVars)]}
if (length(cramer_d) > 0 ) {
cramer_vars <- matrix(0,((dim(cramer_d)[2]*(dim(cramer_d)[2]-1))/2),3)
cramer_v <- cramer(cramer_d)
c=0
for (j in 1:dim(cramer_v)[2]) {
if ((j+1) <= dim(cramer_v)[2]) {for (k in (j+1):dim(cramer_v)[2]) {
c=c+1
cramer_vars[c,1] <- rownames(cramer_v)[j]
cramer_vars[c,2] <- colnames(cramer_v)[k]
cramer_vars[c,3] <- cramer_v[j,k]
}
}
}
cramer_vars <- data.frame(cramer_vars)
colnames(cramer_vars) <- c("Variable1", "Variable2", "Coeff")
cramer_vars$Coeff <- as.numeric(as.character(cramer_vars$Coeff))
#Track the variables that are highly correlated
corr_categorical <- cramer_vars[cramer_vars[["Coeff"]] >= cutoff,]
}
#Correlation for numeric variables
if (is.null(numVars)) {
message("No numeric variables in dataset")
} else {corr_d <- data[,which(colnames(data) %in% numVars)]}
if (length(corr_d) > 0 ) {
corr_vars <- matrix(0,((dim(corr_d)[2]*(dim(corr_d)[2]-1))/2),3)
corr_v <- cor(corr_d, use="complete.obs", method=corrmethod)
c=0
for (j in 1:dim(corr_v)[2]) {
if ((j+1) <= dim(corr_v)[2]) {for (k in (j+1):dim(corr_v)[2]) {
c=c+1
corr_vars[c,1] <- rownames(corr_v)[j]
corr_vars[c,2] <- colnames(corr_v)[k]
corr_vars[c,3] <- corr_v[j,k]
}
}
}
corr_vars <- data.frame(corr_vars)
colnames(corr_vars) <- c("Variable1", "Variable2", "Coeff")
corr_vars$Coeff <- as.numeric(as.character(corr_vars$Coeff))
#Track the variables that are highly correlated
corr_num <- corr_vars[corr_vars[["Coeff"]] >= cutoff,]
}
if (outtype == "list"){
corr_list <- list()
corr_list$numeric_list <- corr_num
corr_list$categorical_list <- corr_categorical
return(corr_list)
} else if (tolower(outtype) == "xls" | tolower(outtype) == "xlsx") {
write.xlsx(corr_num, file=outpath, sheetName="Numeric List", row.names=FALSE)
write.xlsx(corr_categorical, file=outpath, sheetName="Categorical List", append=TRUE, row.names=FALSE)
} else stop("ERROR: Type of output file should either be list, xls or xlsx")
}
install.packages("xlsx")
#Test
library(xlsx)
#' Imputation of missing values.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded form imputation.
#' @param numvarlist A vector of numeric variables to be imputed.
#' @param type_num Type of imputation for numeric variables to be used. Mean is Default method. Choices are min, max, mean, median and mode.
#' @param round Upto which decimal should imputed numeric values be rounded. Default rounds to whole number.
#' @param factvarlist A vector of factor variables to be imputed.
#' @param type_fact Type of imputation for factor variables to be used. Adding 'missing' level is Default method. Choices are mode and missing.
#' @return Input dataset with imputed values.
#' @examples
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mean",round=0,factvarlist=c("rank"),type_fact = "mode")
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "median",round=2,factvarlist=c("rank"),type_fact="missing")
#'
impute <- function(data, excludeVars=NULL,numvarlist=NULL,type_num = "mean",round=0,factvarlist=NULL,type_fact = "missing") {
library(DescTools)
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numvarlist)
if (is.null(numvarlist)) {
numvarlist <- var_type[[1]]
}
if (!is.null(numvarlist)) {
for(i in numvarlist ){
data[[i]] <- as.numeric(data[[i]])
summ <- list()
if (tolower(type_num) == "mean") {
summ[[i]] <- round(mean(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "median") {
summ[[i]] <- round(median(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "mode") {
summ[[i]] <- Mode(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "max") {
summ[[i]] <- max(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "min") {
summ[[i]] <- min(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else stop("ERROR: Only min, max, mean, median and mode allowed for type of numeric variables imputation")
}
}
#Identify character/categorical variables if is.null(factvarlist)
if (is.null(factvarlist)) {
factvarlist <- var_type[[2]]
}
if (!is.null(factvarlist)) {
for(i in factvarlist ){
summ <- list()
if (tolower(type_fact) == "mode") {
summ[[i]] <- Mode(levels(data[[i]])[data[[i]]],na.rm=TRUE)
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),summ[[i]],levels(data[[i]])[data[[i]]]))
}
else if (tolower(type_fact) == "missing") {
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),"Missing",levels(data[[i]])[data[[i]]]))
}
else stop("ERROR: Only 'mode' and 'missing' allowed for type of factor variables imputation")
}
}
return(data)
}
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
#' Identify numeric/integer and categorical/character variables.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded.
#' @return List of numeric and categorical variables.
#' @examples
#' var_type <- var_type_identify(data=data,excludeVars=NULL)
#'
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
#Test
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
var_type <- var_type_identify(data=data,excludeVars=NULL)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
View(data_imputed)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.factor(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
View(data)
str(data)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.numeric(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mode",round=2,factvarlist=c("text_fct"),type_fact="mode")
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.numeric(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("text_fct"),type_num = "mode",round=2,factvarlist=NULL,type_fact="mode")
model(data$text_fct)
mode(data$text_fct)
Mode(data$text_fct)
table(data$text_fct)
str(data)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.numeric(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("text_fct"),type_num = "mode",round=2,factvarlist=NULL,type_fact="mode")
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.integer(c(rep(1,97),rep(2,150),rep(3,150)))
data[1,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[2,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data[5,] <- c(NA,NA,NA,NA,NA,NA,0,NA)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("text_fct"),type_num = "mode",round=2,factvarlist=NULL,type_fact="mode")
#' Imputation of missing values.
#'
#' @param data A dataframe.
#' @param excludeVars A vector of variables to be excluded form imputation.
#' @param numvarlist A vector of numeric variables to be imputed.
#' @param type_num Type of imputation for numeric variables to be used. Mean is Default method. Choices are min, max, mean, median and mode.
#' @param round Upto which decimal should imputed numeric values be rounded. Default rounds to whole number.
#' @param factvarlist A vector of factor variables to be imputed.
#' @param type_fact Type of imputation for factor variables to be used. Adding 'missing' level is Default method. Choices are mode and missing.
#' @return Input dataset with imputed values.
#' @examples
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "mean",round=0,factvarlist=c("rank"),type_fact = "mode")
#' data <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "median",round=2,factvarlist=c("rank"),type_fact="missing")
#'
impute <- function(data, excludeVars=NULL,numvarlist=NULL,type_num = "mean",round=0,factvarlist=NULL,type_fact = "missing") {
library(DescTools)
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numvarlist)
if (is.null(numvarlist)) {
numvarlist <- var_type[[1]]
}
if (!is.null(numvarlist)) {
for(i in numvarlist ){
data[[i]] <- as.numeric(data[[i]])
summ <- list()
if (tolower(type_num) == "mean") {
summ[[i]] <- round(mean(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "median") {
summ[[i]] <- round(median(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "mode") {
summ[[i]] <- Mode(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "max") {
summ[[i]] <- max(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "min") {
summ[[i]] <- min(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else stop("ERROR: Only min, max, mean, median and mode allowed for type of numeric variables imputation")
}
}
#Identify character/categorical variables if is.null(factvarlist)
if (is.null(factvarlist)) {
factvarlist <- var_type[[2]]
}
if (!is.null(factvarlist)) {
for(i in factvarlist ){
summ <- list()
if (tolower(type_fact) == "mode") {
summ[[i]] <- Mode(levels(data[[i]])[data[[i]]],na.rm=TRUE)
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),summ[[i]],levels(data[[i]])[data[[i]]]))
}
else if (tolower(type_fact) == "missing") {
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),"Missing",levels(data[[i]])[data[[i]]]))
}
else stop("ERROR: Only 'mode' and 'missing' allowed for type of factor variables imputation")
}
}
return(data)
}
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data$text_fct <- as.integer(c(rep(1,97),rep(2,150),rep(3,150)))
table(data$text_fct)
Mode(data$text_fct)
Mode(data$text_fct)
Mode(data$text_fct)
str(data)
