list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
train <- data[unlist(samples), ]
test <- data[-unlist(samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
train <- data[samples,]
test <- data[-samples,]
}
} else {
unique_id <- unique(data[[splitkey]])
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
samples <- unique_id[unlist(samples)]
train <- data[data[[splitkey]] %in% samples, ]
test <- data[!(data[[splitkey]] %in% samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
samples <- unique_id[samples]
train <- data[data[[splitkey]] %in% samples,]
test <- data[!(data[[splitkey]] %in% samples),]
}
}
split.data <- list()
split.data$train <- train
split.data$test <- test
return(split.data)
}
#Test
library(xlsx)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
res = split(data=data,filetype = "dataframe", seed=50, splitkey = "id", stratifyby = c("rank"),  trainprop=0.50)
res
View(data)
library(xlsx)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
id <- c(rep(1,10),rep(2,10),rep(3,10),rep(4,10),rep(5,10),rep(6,10),rep(7,30),8:314)
data$id <- id
res = split(data=data,filetype = "dataframe", seed=50, splitkey = "id", stratifyby = c("rank"),  trainprop=0.50)
res
res = split(data=data, filetype = "dataframe",seed=50, splitkey = "patient_id", stratifyby = c("rank"),  trainprop=0.50)
res
str(res)
class(res)
dim(strtrain)
class(res)
dim(res$train)
dim(res$test)
which(res$train[["patient_id"]] %in% res$test[["patient_id"]])
which(res$train[["patient_id"]] %in% res$train[["patient_id"]])
#' Partition data into train and test datasets.
#'
#' @param data A dataframe if filetype is dataframe or file path.
#' @param filetype Type of file read. Provide extension of file if not dataframe. Permissible filetypes are Rds, rds, csv, xls and xlsx.
#' @param seed Random seed value.
#' @param splitkey A key (variable) used to identify all records of the same entity (e.g.patient ID).
#' @param stratifyby A single column name or vector of column names that will be used to stratify data.
#' @param trainprop Proportion that should be retained in train dataset. Value ranges between 0 and 1. Default is 0.70.
#' @return Dataframes as train and test.
#' @examples
#' res = split(data=data,filetype = "dataframe", seed=50, splitkey = NULL, stratifyby = c("rank","discipline"), trainprop=0.70)
#' res = split(data=data, filetype = "dataframe",seed=50, splitkey = NULL, stratifyby = c("discipline"), trainprop=0.70)
#' res = split(data="/stats/projects/all/R_Tools_Development/data/salaries_data.xlsx", filetype = "xlsx",seed=50, splitkey = NULL, stratifyby = c("discipline"), trainprop=0.70)
#' res = split(data="/stats/projects/all/R_Tools_Development/data/salaries_data.csv", filetype = "csv", seed=50, splitkey = NULL, stratifyby = NULL,  trainprop=0.50)
#' res = split(data=data, filetype = "dataframe",seed=50, splitkey = "patient_id", stratifyby = c("rank"),  trainprop=0.50)
#' train <- res$train; test <- res$test
split <- function(data, filetype = "dataframe",seed=50, splitkey = NULL, stratifyby = NULL, trainprop=0.70) {
set.seed(seed)
if (tolower(filetype) == "dataframe") {data = data}
else if (tolower(filetype) == "rds") {data = readRDS(data)}
else if (tolower(filetype) == "xls") {data = read.xlsx(data, sheetName = 1, header = TRUE)}
else if (tolower(filetype) == "xlsx") {data =  read.xlsx(data, sheetName = 1, header = TRUE)}
else if (tolower(filetype) == "csv") {data = read.csv(data,header = TRUE, sep = ",")}
else stop("ERROR: File type is not compatible")
#If unique ID is not required
if (is.null(splitkey)) {
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
train <- data[unlist(samples), ]
test <- data[-unlist(samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
train <- data[samples,]
test <- data[-samples,]
}
} else {
unique_id <- unique(data[[splitkey]])
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
samples <- unique_id[unlist(samples)]
train <- data[data[[splitkey]] %in% samples, ]
test <- data[!(data[[splitkey]] %in% samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
samples <- unique_id[samples]
train <- data[data[[splitkey]] %in% samples,]
test <- data[!(data[[splitkey]] %in% samples),]
}
}
split.data <- list()
split.data$train <- train
split.data$test <- test
return(split.data)
}
#Test
library(xlsx)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
res = split(data=data,filetype = "dataframe", seed=50, splitkey = NULL, stratifyby = c("rank","discipline"), trainprop=0.70)
train = res$train
test = res$test
table(train$rank)
table(test$rank)
64*.7
185+81
266*.7
table(test$discipline)
table(train$discipline)
125+56
181*.7
150+66
216*.3
a = c(1,2)
str(a)
class(a)
class(a) = "integer"
class(a)
str(a)
#Test
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
var_type <- var_type_identify(data=data,excludeVars=NULL)
var_type_identify <- function (data,excludeVars=NULL) {
#Identify numeric variables
numVars <- NA
if (is.na(numVars[1])) {
for (i in 1:dim(data)[2]) {
yesnum <-  is.numeric(data[,i]) | is.integer(data[,i])
numVars <- append(numVars,ifelse(yesnum == "TRUE", colnames(data)[i],numVars),after = length(numVars))
}
}
numVars <- na.omit(numVars)
numVars <- numVars[!(numVars %in% excludeVars)]
#Identify character/categorical variables
categoricalVars <- NA
if (is.na(categoricalVars[1])) {
categoricalVars <- NA
for (i in 1:dim(data)[2]) {
yescat <-  is.character(data[,i]) | is.factor(data[,i])
categoricalVars <- append(categoricalVars,ifelse(yescat == "TRUE", colnames(data)[i],categoricalVars),after = length(categoricalVars))
}
}
categoricalVars <- na.omit(categoricalVars)
categoricalVars <- categoricalVars[!(categoricalVars %in% excludeVars)]
return(list(numVars,categoricalVars))
}
#Test
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
var_type <- var_type_identify(data=data,excludeVars=NULL)
var_type
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
multicoll_chk <- function(data,excludeVars=NULL,numVars=NULL,categoricalVars=NULL,cutoff=0,corrmethod="pearson",outtype="list",outpath) {
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numVars)
if (is.null(numVars)) {
numVars <- var_type[[1]]
}
#Identify character/categorical variables if is.null(categoricalVars)
if (is.null(categoricalVars)) {
categoricalVars <- var_type[[2]]
}
#Correlation for categorical variables
library(pedometrics)
if (is.null(categoricalVars)) {
message("No numeric variables in dataset")
}  else {    cramer_d <- data[,which(colnames(data) %in% categoricalVars)]}
if (length(cramer_d) > 0 ) {
cramer_vars <- matrix(0,((dim(cramer_d)[2]*(dim(cramer_d)[2]-1))/2),3)
cramer_v <- cramer(cramer_d)
c=0
for (j in 1:dim(cramer_v)[2]) {
if ((j+1) <= dim(cramer_v)[2]) {for (k in (j+1):dim(cramer_v)[2]) {
c=c+1
cramer_vars[c,1] <- rownames(cramer_v)[j]
cramer_vars[c,2] <- colnames(cramer_v)[k]
cramer_vars[c,3] <- cramer_v[j,k]
}
}
}
cramer_vars <- data.frame(cramer_vars)
colnames(cramer_vars) <- c("Variable1", "Variable2", "Coeff")
cramer_vars$Coeff <- as.numeric(as.character(cramer_vars$Coeff))
#Track the variables that are highly correlated
corr_categorical <- cramer_vars[cramer_vars[["Coeff"]] >= cutoff,]
}
#Correlation for numeric variables
if (is.null(numVars)) {
message("No numeric variables in dataset")
} else {corr_d <- data[,which(colnames(data) %in% numVars)]}
if (length(corr_d) > 0 ) {
corr_vars <- matrix(0,((dim(corr_d)[2]*(dim(corr_d)[2]-1))/2),3)
corr_v <- cor(corr_d, use="complete.obs", method=corrmethod)
c=0
for (j in 1:dim(corr_v)[2]) {
if ((j+1) <= dim(corr_v)[2]) {for (k in (j+1):dim(corr_v)[2]) {
c=c+1
corr_vars[c,1] <- rownames(corr_v)[j]
corr_vars[c,2] <- colnames(corr_v)[k]
corr_vars[c,3] <- corr_v[j,k]
}
}
}
corr_vars <- data.frame(corr_vars)
colnames(corr_vars) <- c("Variable1", "Variable2", "Coeff")
corr_vars$Coeff <- as.numeric(as.character(corr_vars$Coeff))
#Track the variables that are highly correlated
corr_num <- corr_vars[corr_vars[["Coeff"]] >= cutoff,]
}
if (outtype == "list"){
corr_list <- list()
corr_list$numeric_list <- corr_num
corr_list$categorical_list <- corr_categorical
return(corr_list)
} else if (tolower(outtype) == "xls" | tolower(outtype) == "xlsx") {
write.xlsx(corr_num, file=outpath, sheetName="Numeric List", row.names=FALSE)
write.xlsx(corr_categorical, file=outpath, sheetName="Categorical List", append=TRUE, row.names=FALSE)
} else stop("ERROR: Type of output file should either be list, xls or xlsx")
}
a = multicoll_chk(data=data)
a
var_type[[1]]
var_type[[2]]
a = multicoll_chk(data=data,excludeVars="patient_id")
a
var_type[[1]]
impute <- function(data, excludeVars=NULL,numvarlist,type_num = "mean",round=0,factvarlist,type_fact = "missing") {
library(DescTools)
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numvarlist)
if (is.null(numvarlist)) {
numvarlist <- var_type[[1]]
}
if (!is.null(numvarlist)) {
for(i in numvarlist ){
data[[i]] <- as.numeric(data[[i]])
summ <- list()
if (tolower(type_num) == "mean") {
summ[[i]] <- round(mean(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "median") {
summ[[i]] <- round(median(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "mode") {
summ[[i]] <- Mode(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "max") {
summ[[i]] <- max(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "min") {
summ[[i]] <- min(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else stop("ERROR: Only min, max, mean, median and mode allowed for type of numeric variables imputation")
}
}
#Identify character/categorical variables if is.null(factvarlist)
if (is.null(factvarlist)) {
factvarlist <- var_type[[2]]
}
if (!is.null(factvarlist)) {
for(i in factvarlist ){
summ <- list()
if (tolower(type_fact) == "mode") {
summ[[i]] <- Mode(levels(data[[i]])[data[[i]]],na.rm=TRUE)
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),summ[[i]],levels(data[[i]])[data[[i]]]))
}
else if (tolower(type_fact) == "missing") {
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),"Missing",levels(data[[i]])[data[[i]]]))
}
else stop("ERROR: Only 'mode' and 'missing' allowed for type of factor variables imputation")
}
}
return(data)
}
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data[1,] <- c(NA,NA,NA,NA,NA,NA,0)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data,numvarlist=c("salary","yrs.service"),type_num = "max",round=2,factvarlist=c("rank"),type_fact="missing")
View(data_imputed)
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data[1,] <- c(NA,NA,NA,NA,NA,NA,0)
data$salary = as.integer(data$salary)
View(data)
data_imputed <- impute(data=data)
impute <- function(data, excludeVars=NULL,numvarlist=NULL,type_num = "mean",round=0,factvarlist=NULL,type_fact = "missing") {
library(DescTools)
var_type <- var_type_identify(data=data,excludeVars=excludeVars)
#Identify numeric variables if is.null(numvarlist)
if (is.null(numvarlist)) {
numvarlist <- var_type[[1]]
}
if (!is.null(numvarlist)) {
for(i in numvarlist ){
data[[i]] <- as.numeric(data[[i]])
summ <- list()
if (tolower(type_num) == "mean") {
summ[[i]] <- round(mean(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "median") {
summ[[i]] <- round(median(data[[i]],na.rm=TRUE),round)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "mode") {
summ[[i]] <- Mode(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "max") {
summ[[i]] <- max(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else if (tolower(type_num) == "min") {
summ[[i]] <- min(data[[i]],na.rm=TRUE)
data[[i]] <- ifelse(is.na(data[[i]]),summ[[i]],data[[i]])
}
else stop("ERROR: Only min, max, mean, median and mode allowed for type of numeric variables imputation")
}
}
#Identify character/categorical variables if is.null(factvarlist)
if (is.null(factvarlist)) {
factvarlist <- var_type[[2]]
}
if (!is.null(factvarlist)) {
for(i in factvarlist ){
summ <- list()
if (tolower(type_fact) == "mode") {
summ[[i]] <- Mode(levels(data[[i]])[data[[i]]],na.rm=TRUE)
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),summ[[i]],levels(data[[i]])[data[[i]]]))
}
else if (tolower(type_fact) == "missing") {
data[[i]] <- as.factor(ifelse(is.na(data[[i]]),"Missing",levels(data[[i]])[data[[i]]]))
}
else stop("ERROR: Only 'mode' and 'missing' allowed for type of factor variables imputation")
}
}
return(data)
}
data = readRDS("/stats/projects/all/R_Tools_Development/data/salaries_data.Rds")
data[1,] <- c(NA,NA,NA,NA,NA,NA,0)
data$salary = as.integer(data$salary)
data_imputed <- impute(data=data)
mean(data$yrs.since.phd,na.rm=T)
mean(data$yrs.service,na.rm=T)
mean(data$salary,na.rm=T)
str(data_imputed)
round(113640.7,0)
round(113640.7,2)
split <- function(data, filetype = "dataframe",seed=50, splitkey = NULL, stratifyby = NULL, trainprop=0.70) {
set.seed(seed)
data <- filetype(data=data,filetype=filetype)
#If unique ID is not required
if (is.null(splitkey)) {
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
train <- data[unlist(samples), ]
test <- data[-unlist(samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
train <- data[samples,]
test <- data[-samples,]
}
} else {
unique_id <- unique(data[[splitkey]])
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
samples <- unique_id[unlist(samples)]
train <- data[data[[splitkey]] %in% samples, ]
test <- data[!(data[[splitkey]] %in% samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
samples <- unique_id[samples]
train <- data[data[[splitkey]] %in% samples,]
test <- data[!(data[[splitkey]] %in% samples),]
}
}
split.data <- list()
split.data$train <- train
split.data$test <- test
return(split.data)
}
res = split(data=data, filetype = "Rdata", seed=50, splitkey = NULL, stratifyby = NULL,  trainprop=0.50)
filetype <- function(data,filetype="dataframe") {
if (tolower(filetype) == "dataframe") {data = data}
else if (tolower(filetype) == "rds") {data = readRDS(data)}
else if (tolower(filetype) == "xls") {data = read.xlsx(data, sheetName = 1, header = TRUE)}
else if (tolower(filetype) == "xlsx") {data =  read.xlsx(data, sheetName = 1, header = TRUE)}
else if (tolower(filetype) == "csv") {data = read.csv(data,header = TRUE, sep = ",")}
else stop("ERROR: File type is not compatible")
return(data)
}
split <- function(data, filetype = "dataframe",seed=50, splitkey = NULL, stratifyby = NULL, trainprop=0.70) {
set.seed(seed)
data <- filetype(data=data,filetype=filetype)
#If unique ID is not required
if (is.null(splitkey)) {
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
train <- data[unlist(samples), ]
test <- data[-unlist(samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
train <- data[samples,]
test <- data[-samples,]
}
} else {
unique_id <- unique(data[[splitkey]])
# If stratified sampling is required
if (!is.null(stratifyby)){
list_t <- NULL
list_t <- data[[stratifyby[1]]]
if (length(stratifyby) > 1) {
for (i in 2: length(stratifyby)){
list_t <- list(list_t,data[[stratifyby[i]]])
}
}
sp <- base::split(seq_len(nrow(data)), list_t)
samples <- lapply(sp, function(x) sample(x, replace=F,size=trainprop*length(x)))
samples <- unique_id[unlist(samples)]
train <- data[data[[splitkey]] %in% samples, ]
test <- data[!(data[[splitkey]] %in% samples),]
} else {
samples <- sample(1:dim(data)[1],replace=F,size=trainprop*dim(data)[1])
samples <- unique_id[samples]
train <- data[data[[splitkey]] %in% samples,]
test <- data[!(data[[splitkey]] %in% samples),]
}
}
split.data <- list()
split.data$train <- train
split.data$test <- test
return(split.data)
}
res = split(data=data, filetype = "Rdata", seed=50, splitkey = NULL, stratifyby = NULL,  trainprop=0.50)
res = split(data="/stats/projects/all/R_Tools_Development/data/salaries_data.xlsx", filetype = "xlsx",seed=50, splitkey = NULL, stratifyby = c("discipline"), trainprop=0.70)
#Test
library(xlsx)
res = split(data="/stats/projects/all/R_Tools_Development/data/salaries_data.xlsx", filetype = "xlsx",seed=50, splitkey = NULL, stratifyby = c("discipline"), trainprop=0.70)
str(res)
277+120
.7*397
