getwd()
knitr::opts_chunk$set(echo = TRUE)
temp_df <- data.frame(a = c(1,2,3), b = c("A", "B", "C"))
?enquote()
library("tidyverse")
name_parser <- function(df, colname) {
colname <- enquo(colname)
df %>%
select(!!colname)
}
name_parser(temp_df, a)
name_parser <- function(df, colname) {
return(str(colname))
# colname <- enquo(colname)
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser(temp_df, "a")
name_parser <- function(df, colname) {
colname <- enquo(colname)
return(str(colname))
# df %>%
#   select(!!colname)
}
name_parser(temp_df, "a")
name_parser <- function(df, colname) {
# colname <- enquo(colname)
return(missing(colname))
# df %>%
#   select(!!colname)
}
name_parser(temp_df, "a")
name_parser(temp_df, a)
name_parser(temp_df, a)
name_parser <- function(df, colname) {
# colname <- enquo(colname)
return(exists(colname))
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
is.environment()
is.environment("a")
?switch (object,
case = action
)
name_parser <- function(df, colname) {
print('a')
# colname <- enquo(colname)
# return(missing(colname))
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser <- function(df, colname) {
print('a')
# colname <- enquo(colname)
return(hasArg(colname))
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser <- function(df, colname) {
args <- list(...)
exist <- !is.null(args[['colname']])
return(exist)
# colname <- enquo(colname)
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser <- function(df, colname) {
args <- list(...)
exist <- !is.null(args[['colname']])
return(exist)
# colname <- enquo(colname)
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser <- function(df, colname, ...) {
args <- list(...)
exist <- !is.null(args[['colname']])
return(exist)
# colname <- enquo(colname)
# df %>%
#   select(!!colname)
}
name_parser(temp_df, a)
name_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
exists(df[outcome]) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
exists(df[[outcome]]) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[[outcome]]) %>% str(.) %>% return
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[[outcome]]) %>% str(.) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[[outcome]]) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[outcome]) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[outcome2]) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
(df[outcome2]) %>% exists(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
str_detect(colnames(df), outcome) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
str_detect(names(df), outcome) %>% return(.)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
str_detect(names(df), outcome)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
str_match(names(df), outcome)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
str_detect(paste0(names(df), collapse = "|"), outcome)
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "a")
?message
?sprintf
name(temp_df)
attr(temp_df)
attr(temp_df, "name")
substitute(temp_df)
substitute(temp_df) %>% str
substitute(temp_df) %>% deparse()
deparse(substitute(temp_df))
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
warning(sprintf("Variable %v not found in dataset %d", outcome, deparse(substitute(df))))
}
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "z")
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
warning(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
}
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "z")
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
}
# df %>%
#   select(!!colname)
}
outcome_parser(temp_df, "z")
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {}
}
outcome_parser(temp_df, "a")
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {message("success!")}
}
outcome_parser(temp_df, "a")
outcome_parser(temp_df, "z")
?compareGroups::compareGroups()
knitr::opts_chunk$set(echo = TRUE)
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {return(TRUE)}
}
outcome_parser(temp_df, "z")
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {return(TRUE)}
}
outcome_parser(temp_df, "a")
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "C")))
univariate_fun <- function(df, outcome) {
if(outcome_parser(df = df, outcome = outcome)) {
print('a')
}
}
univariate_fun(temp_df, "b")
univariate_fun <- function(df, outcome) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ ."))
return(univariate_formula)
}
}
univariate_fun(temp_df, "b")
univariate_fun(temp_df, "b", "c")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
return(univariate_formula)
}
}
univariate_fun(temp_df, "b", "c")
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "C")), c = (4, 5, 6))
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "C")), c = (4, 5, 6))
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "C")), c = c(4, 5, 6))
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df)
}
univariate_fun(temp_df, "b", "c")
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "A")), c = c(4, 5, 6))
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {return(TRUE)}
}
outcome_parser(temp_df, "a")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df)
}
univariate_fun(temp_df, "b", "c")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df, family = "binomial")
}
univariate_fun(temp_df, "b", "c")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b", "c")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b")
univariate_fun <- function(df, outcome, exclude_vars = NULL) {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b")
univariate_fun <- function(df, outcome, exclude_vars = "") {
if(outcome_parser(df = df, outcome = outcome)) {
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
# return(univariate_formula)
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
if(!missing(exclude_vars)){
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))}
} else univariate_formula <- as.formula(paste(outcome, "~ ."))}
glm(univariate_formula, data = df, family = "binomial") %>% summary
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
if(!missing(exclude_vars)){
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
}
else {
univariate_formula <- as.formula(paste(outcome, "~ ."))
}
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b")
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "A")), c = c(4, 5, 60))
outcome_parser <- function(df, outcome) {
if(!str_detect(paste0(names(df), collapse = "|"), outcome)) {
stop(sprintf("Variable %s not found in dataset %s", outcome, deparse(substitute(df))))
} else {return(TRUE)}
}
outcome_parser(temp_df, "a")
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
if(!missing(exclude_vars)){
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
}
else {
univariate_formula <- as.formula(paste(outcome, "~ ."))
}
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b", "c")
univariate_fun(temp_df, "b")
paste(c("aaa", "bbb"))
paste(c("aaa", "bbb"), sep = " - ")
paste(c("aaa", "bbb"), sep = " \\- ")
paste(c("aaa", "bbb"), sep = " /.- ")
paste(c("aaa", "bbb"), sep = " /.- ")
paste(c("aaa", "bbb"), sep = " //- ")
paste(c("aaa", "bbb"), collapse =  = " //- ")
paste(c("aaa", "bbb"), collapse = " //- ")
paste(c("aaa", "bbb"), collapse = " - ")
paste("-", c("aaa", "bbb"), collapse = " - ")
paste("-", c("aaa", "bbb"))
paste("-", c("aaa", "bbb"), collapse = "")
paste("-", c("aaa", "bbb"), collapse = " ")
paste("-", c("aaa", "bbb"), sep = " ")
paste("-", c("aaa", "bbb"), collapse = " ")
paste0("-", c("aaa", "bbb"))
paste0("-", c("aaa", "bbb"), collapse = "")
paste0("-", c("aaa", "bbb"), collapse = " ")
?paste0
univariate_fun <- function(df, outcome, exclude_vars) {
if(outcome_parser(df = df, outcome = outcome)) {
if(!missing(exclude_vars)){
exclude_vars <- paste0("-", exclude_vars, collapse = " ")
univariate_formula <- as.formula(paste(outcome, "~ .", "- ", exclude_vars))
}
else {
univariate_formula <- as.formula(paste(outcome, "~ ."))
}
}
glm(univariate_formula, data = df, family = "binomial") %>% summary
}
univariate_fun(temp_df, "b")
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "A")), c = c(4, 5, 60),
d = c(100, 1000, 1000))
univariate_fun(temp_df, "b", c("c", "d"))
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "A")), c = c(4, 5, 60),
d = c(100, 1000, 1000), e = c(1000, 10000, 10000))
univariate_fun(temp_df, "b", c("c", "e"))
univariate_fun(temp_df, "b", c("d", "e"))
temp_df <- data.frame(a = c(1,2,3), b = as.factor(c("A", "B", "A")), c = c(4000, 5, 60),
d = c(100, 1000, 1000), e = c(1000, 10000, 10000))
univariate_fun(temp_df, "b", c("d", "e"))
univariate_fun(temp_df, "b")
